package dk.statsbiblioteket.broadcasttranscoder.processors;

import dk.statsbiblioteket.broadcasttranscoder.cli.OptionParseException;
import dk.statsbiblioteket.broadcasttranscoder.cli.SingleTranscodingContext;
import dk.statsbiblioteket.broadcasttranscoder.persistence.entities.TranscodingRecord;
import dk.statsbiblioteket.broadcasttranscoder.reklamefilm.ReklamefilmFileResolverProcessor;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;

import static dk.statsbiblioteket.broadcasttranscoder.processors.UnistreamTranscoderProcessorTest.readBehaviouralProperties;

public class SnapshotExtractorProcessorTest {

    @Test
    public void testCreateReklamefilm() throws IOException, OptionParseException, URISyntaxException,
                                                       ProcessorException {
        SnapshotExtractorProcessor snaps = new SnapshotExtractorProcessor();
    
        TranscodeRequest request = new TranscodeRequest();
    
     /*
     Input #0, mpeg, from '/net/zone1.isilon.sblokalnet/ifs/archive/bitmag-devel01-data/bitmag1/disk1/perm/reklame/reklame_tv2/splits/2005/tv2rekl200505_0033.mpg':
     Duration: 00:00:25.96, start: 0.184656, bitrate: 8168 kb/s
        Stream #0:0[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, bottom first), 720x576 [SAR 16:15 DAR 4:3], 25 fps, 25 tbr, 90k tbn, 50 tbc
        Stream #0:1[0x1c0]: Audio: mp2, 48000 Hz, stereo, s16p, 192 kb/s

      */
        String ffprobeOutput =
                "Input #0, mpeg, from '/net/zone1.isilon.sblokalnet/ifs/archive/bitmag-devel01-data/bitmag1/disk1/perm/reklame/reklame_tv2/splits/2005/tv2rekl200505_0033.mpg':\n"
                + "     Duration: 00:00:25.96, start: 0.184656, bitrate: 8168 kb/s\n"
                + "        Stream #0:0[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, bottom first), 720x576 [SAR 16:15 DAR 4:3], 25 fps, 25 tbr, 90k tbn, 50 tbc\n"
                + "        Stream #0:1[0x1c0]: Audio: mp2, 48000 Hz, stereo, s16p, 192 kb/s";
    
    
        request.setObjectPid("uuid:3b980622-67cb-484b-993a-37a5d3732f0f");
        File file
                = new File("/net/zone1.isilon.sblokalnet/ifs/archive/bitmag-devel01-data/bitmag1/disk1/perm/reklame/reklame_tv2/splits/2005/tv2rekl200505_0033.mpg");
        TranscodeRequest.FileClip clip = new TranscodeRequest.FileClip(file.toString());
        request.setClips(Arrays.asList(clip));
    
    
        SingleTranscodingContext<TranscodingRecord> context = new SingleTranscodingContext<>();
        context.setBehaviourConfigFile(new File(Thread.currentThread().getContextClassLoader().getResource("bta.behaviour.properties").toURI()));
    
        context.setFileOutputRootdir(new File("streamingContent/"));
        context.setSnapshotOutputRootdir(new File("imageDirectory/"));
        context.setFileDepth(4);
        readBehaviouralProperties(context);
    
    
        ReklamefilmFileResolverProcessor.decorateReklamefile(request, context, file);
    
        PidAndAsepctRatioExtractorProcessor.parseFFProbeOutput(request,context,ffprobeOutput);
    
        request.setFfprobeDurationSeconds((float) 25.96);
        String commandline = snaps.getCommandLine(request, context);
        System.out.println(commandline);
    }
    
    @Test
    public void createCommandline() {
//        This is just a utility to let you see what the commandline generated by the system
//        This is nessesary, as the options are dependent on length and other properties
        SnapshotExtractorProcessor processor = new SnapshotExtractorProcessor();
    
    
    
        String commandlineOld = processor.createCommandlineOld(
                16,
                9,
                26,
                120,
                5,
                new File("/home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4"),
                25*60,
                "/home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png",
                49.0/27)
                                         .replaceAll("\\s+", " ");
        System.out.println("Old Commandline:\n"+commandlineOld+"\n");
    
        String commandline = processor.createCommandline(
                16,
                9,
                26,
                120,
                5,
                new File("/home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4"),
                25*60,
                "/home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png",
                49.0/27)
                                      .replaceAll("\\s+", " ");
        System.out.println("Best Commandline:\n"+commandline+"\n");
        
        String commandLineKUANA = processor.createCommandLineKUANA(
                16,
                9,
                26,
                120,
                5,
                new File("/home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4"),
                25*60,
                "/home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png",
                49.0/27)
                                           .replaceAll("\\s+", " ");


        System.out.println("KUANA Commandline:\n"+commandLineKUANA+"\n");
    
        String propertyBasedCommandLine = processor.createCommandLineProperties("ffmpeg \n"
                                                                                + "                        $$INPUT_FILES$$ \n"
                                                                                + "                        -ss $$START_OFFSET$$ -t $$LENGTH$$ \n"
                                                                                + "                        -vf \"fps=$$NFRAMES$$/$$LENGTH$$,scale=[WIDTH]x[HEIGHT],pad=$$HEIGHT$$:$$WIDTH$$:[PADDING_X]:[PADDING_Y]\" \n"
                                                                                + "                        -an \n"
                                                                                + "                        -vframes $$NFRAMES$$ \n"
                                                                                + "                        -y $$OUTPUT_FILE$$",
                                                                                16,
                                                                                9,
                                                                                26,
                                                                                120,
                                                                                5,
                                                                                new File(
                                                                                        "/home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4"),
                                                                                25 * 60,
                                                                                "/home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png",
                                                                                49.0 / 27)
                                                   .replaceAll("\\s+"," ");
        System.out.println("PropertyBasedCommandLine:\n"+propertyBasedCommandLine+"\n");
        
        assertEquals(commandLineKUANA,
                            propertyBasedCommandLine);
        
//        4.0 version:          ffmpeg -i /home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4 -ss 120 -t 1260 -r 4/1260 -s 416x229 -vf 'pad=416:234:0:2:black'  -an -y -vframes 6 /home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png
//        4.1 best version:     ffmpeg -i /home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4 -ss 120 -t 1260 -r 4/1260 -s 416x234  -vf "scale=iw*sar:ih , pad=max(iw\,ih*(16/9)):ow/(16/9):(ow-iw)/2:(oh-ih)/2"  -aspect 16:9  -an -y -vframes 6 /home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png
//        4.1 KUANA version:    ffmpeg -i /home/bta/streamingContent/6a844744-45ba-486d-902e-b552c0e89d4f.mp4 -ss 120 -t 1500 -vf "fps=5/1500,scale=416x234,pad=416:234:0:0" -an -y -vframes 5 /home/larm/imageDirectory/6a844744-45ba-486d-902e-b552c0e89d4f.%d.png


        /*
        scale=iw*sar:ih , pad=max(iw\,ih*(16/9)):ow/(16/9):(ow-iw)/2:(oh-ih)/2
        scale = input_width*toSAR(input_height)


        pad:
            output_width = max input_width og input_height*16/9
            output_height = output_width * 9/16
            pad_width = (output_width - input_width) / 2
            pad_height = (output_height - input_height) / 2

*/
    }
}